{"version":3,"sources":["styles/calculator.module.css","imgs/SQUARE-BR-TIGHT.png","MyCanvas.js","Section.js","Calculator.js","App.js","index.js","styles/section.module.css"],"names":["module","exports","MyCanavas","props","draw","canvasRef","useRef","useEffect","context","current","getContext","ref","width","canvasWidth","height","canvasHeight","Section","className","styles","mainContainer","children","Calculator","useState","stripSheetWidth","stripSheetHeight","printWidth","printHeight","innerMargin","outerMargin","partQty","parentSheetWidth","parentSheetHeight","partsPerPrint","inputField","setInputField","printUp","setPrintUp","stripUp","setStripUp","stripQty","setStripQty","sheetQty","setSheetQty","scale","windowWidth","window","innerWidth","inputsHandler","e","target","value","name","parseFloat","partsAcross","sheetDim","partDim","coordinate","partCount","makeGrid","x","y","ctx","xOffset","yOffset","columnLengthInitial","columnLength","rowLength","grid","push","strokeRect","dropDim","useCallback","columns","rows","extraColumns","extraRows","dropWidth","dropHeight","Math","ceil","floor","rowContainer","rowWrapContainer","columnContainer","type","onChange","placeholder","step","clearRect","canvas","fillStyle","fillRect","lineWidth","strokeStyle","onClick","newWidth","newHeight","resultNumber","isNaN","newPrintWidth","newPrintHeight","newStripWidth","newStripHeight","isFinite","App","src","logo","alt","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.21e93ec4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"calculator_mainContainer__3t0oQ\",\"rowContainer\":\"calculator_rowContainer__1d4H0\",\"rowWrapContainer\":\"calculator_rowWrapContainer__3Wjoy\",\"columnContainer\":\"calculator_columnContainer__sLtfu\",\"resultNumber\":\"calculator_resultNumber__2PR-p\"};","export default __webpack_public_path__ + \"static/media/SQUARE-BR-TIGHT.997181bd.png\";","import React, { useRef, useEffect } from \"react\";\r\n\r\nexport default function MyCanavas(props) {\r\n  const { draw } = props;\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext(\"2d\");\r\n    const render = () => {\r\n      draw(context);\r\n    };\r\n    render();\r\n  }, [draw]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      width={props.canvasWidth}\r\n      height={props.canvasHeight}\r\n    />\r\n  );\r\n}\r\n","import styles from \"./styles/section.module.css\";\r\n\r\nexport default function Section(props) {\r\n  return <div className={styles.mainContainer}>{props.children}</div>;\r\n}\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport MyCanavas from \"./MyCanvas\";\r\nimport Section from \"./Section\";\r\n\r\nimport styles from \"./styles/calculator.module.css\";\r\n\r\nexport default function Calculator() {\r\n  const [inputField, setInputField] = useState({\r\n    stripSheetWidth: 48,\r\n    stripSheetHeight: 16,\r\n    printWidth: 8,\r\n    printHeight: 10,\r\n    innerMargin: 0,\r\n    outerMargin: 0,\r\n    partQty: 100,\r\n    parentSheetWidth: 96,\r\n    parentSheetHeight: 48,\r\n    partsPerPrint: 1\r\n  });\r\n\r\n  const [printUp, setPrintUp] = useState(0);\r\n  const [stripUp, setStripUp] = useState(0);\r\n\r\n  const [stripQty, setStripQty] = useState(0);\r\n  const [sheetQty, setSheetQty] = useState(0);\r\n\r\n  let scale = 1.75;\r\n  let windowWidth = window.innerWidth;\r\n\r\n  switch (true) {\r\n    case windowWidth > 400 && windowWidth < 500:\r\n      scale = 2;\r\n      break;\r\n    case windowWidth > 500 && windowWidth < 600:\r\n      scale = 2.75;\r\n      break;\r\n    case windowWidth > 600 && windowWidth < 700:\r\n      scale = 3.5;\r\n      break;\r\n    case windowWidth > 800:\r\n      scale = 5;\r\n      break;\r\n    default:\r\n      scale = 1.75;\r\n  }\r\n\r\n  const inputsHandler = (e) => {\r\n    if (e.target.value >= 0) {\r\n      if (e.target.name === \"partQty\" || e.target.name === \"partsPerPrint\") {\r\n        setInputField({\r\n          ...inputField,\r\n          [e.target.name]: parseFloat(e.target.value)\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (e.target.value <= 144) {\r\n        setInputField({\r\n          ...inputField,\r\n          [e.target.name]: parseFloat(e.target.value)\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const drawStrip = (ctx) => {\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n    ctx.fillStyle = \"white\";\r\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeStyle = \"#ff0000\";\r\n    makeGrid(\r\n      inputField.outerMargin * scale,\r\n      inputField.outerMargin * scale,\r\n      inputField.outerMargin * scale,\r\n      inputField.innerMargin * scale,\r\n      inputField.stripSheetWidth * scale,\r\n      inputField.stripSheetHeight * scale,\r\n      inputField.printWidth * scale,\r\n      inputField.printHeight * scale,\r\n      ctx\r\n    );\r\n\r\n    //check if right drop is usable for rotated parts\r\n    let dropWidth = dropDim(\r\n      inputField.stripSheetWidth,\r\n      inputField.printWidth,\r\n      inputField.innerMargin,\r\n      inputField.outerMargin\r\n    );\r\n    if (dropWidth >= inputField.printHeight) {\r\n      let x = coordinate(\r\n        inputField.stripSheetWidth,\r\n        inputField.printWidth,\r\n        inputField.innerMargin,\r\n        inputField.outerMargin\r\n      );\r\n      makeGrid(\r\n        x * scale,\r\n        inputField.outerMargin * scale,\r\n        inputField.outerMargin * scale,\r\n        inputField.innerMargin * scale,\r\n        dropWidth * scale,\r\n        inputField.stripSheetHeight * scale,\r\n        inputField.printHeight * scale,\r\n        inputField.printWidth * scale,\r\n        ctx\r\n      );\r\n    }\r\n\r\n    //check if bottom drop is usable for rotated parts\r\n    let dropHeight = dropDim(\r\n      inputField.stripSheetHeight,\r\n      inputField.printHeight,\r\n      inputField.innerMargin,\r\n      inputField.outerMargin\r\n    );\r\n    if (dropHeight >= inputField.printWidth) {\r\n      let y = coordinate(\r\n        inputField.stripSheetHeight,\r\n        inputField.printHeight,\r\n        inputField.innerMargin,\r\n        inputField.outerMargin\r\n      );\r\n      makeGrid(\r\n        inputField.outerMargin * scale,\r\n        y * scale,\r\n        inputField.outerMargin * scale,\r\n        inputField.innerMargin * scale,\r\n        inputField.stripSheetWidth * scale,\r\n        dropHeight * scale,\r\n        inputField.printHeight * scale,\r\n        inputField.printWidth * scale,\r\n        ctx\r\n      );\r\n    }\r\n  };\r\n\r\n  const drawParent = (ctx) => {\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n    ctx.fillStyle = \"white\";\r\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeStyle = \"#ff0000\";\r\n    makeGrid(\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      inputField.parentSheetWidth * scale,\r\n      inputField.parentSheetHeight * scale,\r\n      inputField.stripSheetWidth * scale,\r\n      inputField.stripSheetHeight * scale,\r\n      ctx\r\n    );\r\n\r\n    //check if right drop is usable for rotated parts\r\n    let dropWidth = dropDim(\r\n      inputField.parentSheetWidth,\r\n      inputField.stripSheetWidth,\r\n      0,\r\n      0\r\n    );\r\n    if (dropWidth >= inputField.stripSheetHeight) {\r\n      let x = coordinate(\r\n        inputField.parentSheetWidth,\r\n        inputField.stripSheetWidth,\r\n        0,\r\n        0\r\n      );\r\n      makeGrid(\r\n        x * scale,\r\n        0,\r\n        0,\r\n        0,\r\n        dropWidth * scale,\r\n        inputField.parentSheetHeight * scale,\r\n        inputField.stripSheetHeight * scale,\r\n        inputField.stripSheetWidth * scale,\r\n        ctx\r\n      );\r\n    }\r\n\r\n    //check if bottom drop is usable for rotated parts\r\n    let dropHeight = dropDim(\r\n      inputField.parentSheetHeight,\r\n      inputField.stripSheetHeight,\r\n      0,\r\n      0\r\n    );\r\n    if (dropHeight >= inputField.stripSheetWidth) {\r\n      let y = coordinate(\r\n        inputField.parentSheetHeight,\r\n        inputField.stripSheetHeight,\r\n        0,\r\n        0\r\n      );\r\n      makeGrid(\r\n        0,\r\n        y * scale,\r\n        0,\r\n        0,\r\n        inputField.parentSheetWidth * scale,\r\n        dropHeight * scale,\r\n        inputField.stripSheetHeight * scale,\r\n        inputField.stripSheetWidth * scale,\r\n        ctx\r\n      );\r\n    }\r\n  };\r\n\r\n  function rotatePart() {\r\n    let newWidth = inputField.printHeight;\r\n    let newHeight = inputField.printWidth;\r\n    setInputField({\r\n      ...inputField,\r\n      printWidth: newWidth,\r\n      printHeight: newHeight\r\n    });\r\n  }\r\n\r\n  function rotateSheet() {\r\n    let newPrintWidth = inputField.printHeight;\r\n    let newPrintHeight = inputField.printWidth;\r\n    let newStripWidth = inputField.stripSheetHeight;\r\n    let newStripHeight = inputField.stripSheetWidth;\r\n    setInputField({\r\n      ...inputField,\r\n      printWidth: newPrintWidth,\r\n      printHeight: newPrintHeight,\r\n      stripSheetWidth: newStripWidth,\r\n      stripSheetHeight: newStripHeight\r\n    });\r\n  }\r\n\r\n  function partsAcross(sheetDim, partDim, innerMargin, outerMargin) {\r\n    let coordinate = outerMargin;\r\n    let partCount = 0;\r\n\r\n    while (sheetDim > 0 && partDim > 0 && coordinate <= sheetDim) {\r\n      coordinate += partDim;\r\n      if (coordinate <= sheetDim - outerMargin) {\r\n        partCount += 1;\r\n        coordinate += innerMargin;\r\n      }\r\n    }\r\n\r\n    if (partDim > 0) {\r\n      return partCount;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  function makeGrid(\r\n    x,\r\n    y,\r\n    outerMargin,\r\n    innerMargin,\r\n    stripSheetWidth,\r\n    stripSheetHeight,\r\n    printWidth,\r\n    printHeight,\r\n    ctx\r\n  ) {\r\n    let xOffset = x;\r\n    let yOffset = y;\r\n\r\n    let columnLengthInitial = partsAcross(\r\n      stripSheetWidth,\r\n      printWidth,\r\n      innerMargin,\r\n      outerMargin\r\n    );\r\n    let columnLength = columnLengthInitial;\r\n\r\n    let rowLength = partsAcross(\r\n      stripSheetHeight,\r\n      printHeight,\r\n      innerMargin,\r\n      outerMargin\r\n    );\r\n\r\n    let grid = [];\r\n    while (rowLength > 0) {\r\n      while (columnLength > 0) {\r\n        grid.push(ctx.strokeRect(xOffset, yOffset, printWidth, printHeight));\r\n        xOffset += printWidth + innerMargin;\r\n        columnLength -= 1;\r\n      }\r\n      yOffset += printHeight + innerMargin;\r\n      rowLength -= 1;\r\n      //reset columnLength and xOffset for new row\r\n      columnLength = columnLengthInitial;\r\n      xOffset = x;\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  const dropDim = useCallback((sheetDim, partDim, innerMargin, outerMargin) => {\r\n    let parts = partsAcross(sheetDim, partDim, innerMargin, outerMargin);\r\n    return sheetDim - outerMargin - parts * (partDim + innerMargin);\r\n  }, []);\r\n\r\n  function coordinate(sheetDim, partDim, innerMargin, outerMargin) {\r\n    let parts = partsAcross(sheetDim, partDim, innerMargin, outerMargin);\r\n    return outerMargin + parts * (partDim + innerMargin);\r\n  }\r\n\r\n  //Update prints / strip sheet\r\n  useEffect(() => {\r\n    let columns = partsAcross(\r\n      inputField.stripSheetWidth,\r\n      inputField.printWidth,\r\n      inputField.innerMargin,\r\n      inputField.outerMargin\r\n    );\r\n    let rows = partsAcross(\r\n      inputField.stripSheetHeight,\r\n      inputField.printHeight,\r\n      inputField.innerMargin,\r\n      inputField.outerMargin\r\n    );\r\n    let extraColumns = 0;\r\n    let extraRows = 0;\r\n\r\n    //check if right drop is usable for rotated parts\r\n    let dropWidth = dropDim(\r\n      inputField.stripSheetWidth,\r\n      inputField.printWidth,\r\n      inputField.innerMargin,\r\n      inputField.outerMargin\r\n    );\r\n    if (dropWidth >= inputField.printHeight) {\r\n      extraColumns = partsAcross(\r\n        dropWidth,\r\n        inputField.printHeight,\r\n        inputField.innerMargin,\r\n        inputField.outerMargin\r\n      );\r\n      extraRows = partsAcross(\r\n        inputField.stripSheetHeight,\r\n        inputField.printWidth,\r\n        inputField.innerMargin,\r\n        inputField.outerMargin\r\n      );\r\n    }\r\n    //check if botom drop is usable for rotated parts\r\n    let dropHeight = dropDim(\r\n      inputField.stripSheetHeight,\r\n      inputField.printHeight,\r\n      inputField.innerMargin,\r\n      inputField.outerMargin\r\n    );\r\n    if (dropHeight >= inputField.printWidth) {\r\n      extraRows = partsAcross(\r\n        dropHeight,\r\n        inputField.printWidth,\r\n        inputField.innerMargin,\r\n        inputField.outerMargin\r\n      );\r\n      extraColumns = partsAcross(\r\n        inputField.stripSheetWidth,\r\n        inputField.printHeight,\r\n        inputField.innerMargin,\r\n        inputField.outerMargin\r\n      );\r\n    }\r\n    setPrintUp(columns * rows + extraColumns * extraRows);\r\n  }, [inputField, dropDim]);\r\n\r\n  //Update strips / sheet\r\n  useEffect(() => {\r\n    let columns = partsAcross(\r\n      inputField.parentSheetWidth,\r\n      inputField.stripSheetWidth,\r\n      0,\r\n      0\r\n    );\r\n    let rows = partsAcross(\r\n      inputField.parentSheetHeight,\r\n      inputField.stripSheetHeight,\r\n      0,\r\n      0\r\n    );\r\n    let extraColumns = 0;\r\n    let extraRows = 0;\r\n\r\n    //check if right drop is usable for rotated parts\r\n    let dropWidth = dropDim(\r\n      inputField.parentSheetWidth,\r\n      inputField.stripSheetWidth,\r\n      0,\r\n      0\r\n    );\r\n    if (dropWidth >= inputField.stripSheetHeight) {\r\n      extraColumns = partsAcross(dropWidth, inputField.stripSheetHeight, 0, 0);\r\n      extraRows = partsAcross(\r\n        inputField.parentSheetHeight,\r\n        inputField.stripSheetWidth,\r\n        0,\r\n        0\r\n      );\r\n    }\r\n    //check if botom drop is usable for rotated parts\r\n    let dropHeight = dropDim(\r\n      inputField.parentSheetHeight,\r\n      inputField.stripSheetHeight,\r\n      0,\r\n      0\r\n    );\r\n    if (dropHeight >= inputField.stripSheetWidth) {\r\n      extraRows = partsAcross(inputField.stripSheetWidth, dropHeight, 0, 0);\r\n      extraColumns = partsAcross(\r\n        inputField.parentSheetWidth,\r\n        inputField.stripSheetHeight,\r\n        0,\r\n        0\r\n      );\r\n    }\r\n    setStripUp(columns * rows + extraColumns * extraRows);\r\n  }, [inputField, dropDim]);\r\n\r\n  useEffect(() => {\r\n    if (printUp > 0) {\r\n      setStripQty(\r\n        Math.ceil(inputField.partQty / inputField.partsPerPrint / printUp)\r\n      );\r\n    } else {\r\n      setStripQty(0);\r\n    }\r\n  }, [inputField, printUp]);\r\n\r\n  useEffect(() => {\r\n    if (stripQty > 0 && stripUp > 0) {\r\n      setSheetQty(Math.floor((stripQty / stripUp) * 100) / 100);\r\n    } else {\r\n      setSheetQty(0);\r\n    }\r\n  }, [inputField, stripQty, stripUp]);\r\n\r\n  return (\r\n    <div className={styles.mainContainer}>\r\n      {/* Top Row */}\r\n      <div className={styles.rowContainer}>\r\n        <Section>\r\n          <div className={styles.rowWrapContainer}>\r\n            <div className={styles.columnContainer}>\r\n              <h3>PRINT SIZE</h3>\r\n              <div className={styles.rowContainer}>\r\n                <div className={styles.columnContainer}>\r\n                  <h4>Width (in.)</h4>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"printWidth\"\r\n                    onChange={inputsHandler}\r\n                    placeholder=\"width\"\r\n                    value={inputField.printWidth || \"\"}\r\n                  />\r\n                </div>\r\n                <div className={styles.columnContainer}>\r\n                  <h4>Height (in.)</h4>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"printHeight\"\r\n                    onChange={inputsHandler}\r\n                    placeholder=\"height\"\r\n                    value={inputField.printHeight || \"\"}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className={styles.columnContainer}>\r\n              <h3>PARTS</h3>\r\n              <div className={styles.rowContainer}>\r\n                <div className={styles.columnContainer}>\r\n                  <h4>Parts / Print</h4>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"partsPerPrint\"\r\n                    onChange={inputsHandler}\r\n                    placeholder=\"Qty\"\r\n                    value={inputField.partsPerPrint || \"\"}\r\n                  />\r\n                </div>\r\n                <div className={styles.columnContainer}>\r\n                  <h4>Order Qty</h4>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"partQty\"\r\n                    onChange={inputsHandler}\r\n                    placeholder=\"qty\"\r\n                    value={inputField.partQty || \"\"}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Section>\r\n      </div>\r\n\r\n      {/* Strip Sheet*/}\r\n      <Section>\r\n        <h1>STRIP SHEET</h1>\r\n        <div className={styles.rowWrapContainer}>\r\n          {/* Left */}\r\n          <div className={styles.columnContainer}>\r\n            <h3>SIZE</h3>\r\n            <div className={styles.rowContainer}>\r\n              <div className={styles.columnContainer}>\r\n                <h4>Width (in.)</h4>\r\n                <input\r\n                  type=\"number\"\r\n                  name=\"stripSheetWidth\"\r\n                  onChange={inputsHandler}\r\n                  placeholder=\"width\"\r\n                  value={inputField.stripSheetWidth || \"\"}\r\n                />\r\n              </div>\r\n              <div className={styles.columnContainer}>\r\n                <h4>Height (in.)</h4>\r\n                <input\r\n                  type=\"number\"\r\n                  name=\"stripSheetHeight\"\r\n                  onChange={inputsHandler}\r\n                  placeholder=\"height\"\r\n                  value={inputField.stripSheetHeight || \"\"}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className={styles.columnContainer}>\r\n              <h3>MARGINS</h3>\r\n              <div className={styles.rowContainer}>\r\n                <div className={styles.columnContainer}>\r\n                  <h4>Outer (in.)</h4>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"outerMargin\"\r\n                    onChange={inputsHandler}\r\n                    placeholder=\"0\"\r\n                    step=\".125\"\r\n                    value={inputField.outerMargin || \"\"}\r\n                  />\r\n                </div>\r\n                <div className={styles.columnContainer}>\r\n                  <h4>Inner (in.)</h4>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"innerMargin\"\r\n                    onChange={inputsHandler}\r\n                    placeholder=\"0\"\r\n                    step=\".125\"\r\n                    value={inputField.innerMargin || \"\"}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {/* Right */}\r\n          <div className={styles.columnContainer}>\r\n            <div className={styles.rowWrapContainer}>\r\n              <MyCanavas\r\n                draw={drawStrip}\r\n                canvasWidth={inputField.stripSheetWidth * scale}\r\n                canvasHeight={inputField.stripSheetHeight * scale}\r\n              />\r\n            </div>\r\n            <button type=\"button\" onClick={rotatePart}>\r\n              ROTATE PRINT\r\n            </button>\r\n            <h3>\r\n              Parts Up = {\"  \"}\r\n              <span className={styles.resultNumber}>\r\n                {isNaN(printUp) ? 0 : printUp * inputField.partsPerPrint}\r\n              </span>\r\n            </h3>\r\n          </div>\r\n        </div>\r\n      </Section>\r\n\r\n      {/* Parent Sheet */}\r\n      <Section>\r\n        <h1>PARENT SHEET</h1>\r\n        <div className={styles.rowWrapContainer}>\r\n          {/*Left */}\r\n          <div>\r\n            <h3>SIZE</h3>\r\n            <div className={styles.rowContainer}>\r\n              <div className={styles.columnContainer}>\r\n                <h4>Width (in.)</h4>\r\n                <input\r\n                  type=\"number\"\r\n                  name=\"parentSheetWidth\"\r\n                  onChange={inputsHandler}\r\n                  placeholder=\"width\"\r\n                  value={inputField.parentSheetWidth || \"\"}\r\n                />\r\n              </div>\r\n              <div className={styles.columnContainer}>\r\n                <h4>Height (in.)</h4>\r\n                <input\r\n                  type=\"number\"\r\n                  name=\"parentSheetHeight\"\r\n                  onChange={inputsHandler}\r\n                  placeholder=\"height\"\r\n                  value={inputField.parentSheetHeight || \"\"}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/*Right */}\r\n          <div className={styles.columnContainer}>\r\n            <div className={styles.rowContainer}>\r\n              <MyCanavas\r\n                draw={drawParent}\r\n                canvasWidth={inputField.parentSheetWidth * scale}\r\n                canvasHeight={inputField.parentSheetHeight * scale}\r\n              />\r\n            </div>\r\n            <button type=\"button\" onClick={rotateSheet}>\r\n              ROTATE STRIP\r\n            </button>\r\n            <h3>\r\n              Strips Up = {\"  \"}\r\n              <span className={styles.resultNumber}>\r\n                {isNaN(stripUp) ? 0 : stripUp}\r\n              </span>\r\n            </h3>\r\n          </div>\r\n        </div>\r\n      </Section>\r\n\r\n      {/* Bottom Row */}\r\n      <Section>\r\n        <div className={styles.rowWrapContainer}>\r\n          <h3>\r\n            Parent Sheet Total ={\"   \"}\r\n            <span className={styles.resultNumber}>\r\n              {isNaN(sheetQty) || !isFinite(sheetQty) ? 0 : sheetQty}\r\n            </span>\r\n          </h3>\r\n          <h3>\r\n            Strip Sheet Total ={\"   \"}\r\n            <span className={styles.resultNumber}>\r\n              {isNaN(stripQty) || !isFinite(stripQty) ? 0 : stripQty}\r\n            </span>\r\n          </h3>\r\n          <h3>\r\n            Part Total ={\"   \"}\r\n            <span className={styles.resultNumber}>\r\n              {isNaN(stripQty * inputField.partsPerPrint * printUp)\r\n                ? 0\r\n                : stripQty * inputField.partsPerPrint * printUp}\r\n            </span>\r\n          </h3>\r\n        </div>\r\n      </Section>\r\n    </div>\r\n  );\r\n}\r\n","import logo from \"../src/imgs/SQUARE-BR-TIGHT.png\";\n\nimport \"./styles.css\";\nimport Calculator from \"./Calculator.js\";\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <img src={logo} alt=\"IGN Logo\" />\n        <h1>MATERIAL CALCULATOR</h1>\n      </div>\n      <Calculator />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"section_mainContainer__2tFui\"};"],"sourceRoot":""}
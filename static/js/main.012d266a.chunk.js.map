{"version":3,"sources":["styles/calculator.module.css","styles/section.module.css","imgs/SQUARE-BR-TIGHT.png","MyCanvas.js","Section.js","imgs/STACK-FL-TIGHT.png","ComponentToPrint.js","Calculator.js","App.js","index.js","styles/componentToPrint.module.css"],"names":["module","exports","MyCanavas","props","draw","canvasRef","useRef","useEffect","context","current","getContext","ref","width","canvasWidth","height","canvasHeight","Section","className","styles","mainContainer","children","ComponentToPrint","React","forwardRef","date","Date","datestamp","toLocaleDateString","timestamp","toLocaleTimeString","printSource","header","src","logo","alt","inputField","jobID","section","printWidth","printHeight","partsPerPrint","fullRow","isNaN","printUp","stripSheetWidth","stripSheetHeight","stripQty","outerMargin","innerMargin","stripUp","parentSheetWidth","parentSheetHeight","sheetQty","partQty","Calculator","useState","overage","setInputField","setPrintUp","setStripUp","setStripQty","setSheetQty","rotateStrip","setRotateStrip","stripScaleModifier","window","innerWidth","parentScaleModifier","stripScale","toFixed","parentScale","inputsHandler","e","target","name","value","parseFloat","drawStrip","ctx","clearRect","canvas","fillStyle","strokeStyle","fillRect","strokeRect","makeGrid","dropWidth","dropDim","coordinate","dropHeight","y","drawParent","stripWidth","stripHeight","partsAcross","sheetDim","partDim","partCount","x","xOffset","yOffset","columnLengthInitial","columnLength","rowLength","grid","push","useCallback","componentRef","handlePrint","useReactToPrint","content","columns","rows","extraColumns","extraRows","Math","ceil","floor","rowWrapContainer","columnContainer","type","onChange","placeholder","step","onClick","newWidth","newHeight","rowContainer","resultNumber","isFinite","jobInput","App","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.012d266a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"calculator_mainContainer__3t0oQ\",\"rowContainer\":\"calculator_rowContainer__1d4H0\",\"rowWrapContainer\":\"calculator_rowWrapContainer__3Wjoy\",\"columnContainer\":\"calculator_columnContainer__sLtfu\",\"resultNumber\":\"calculator_resultNumber__2PR-p\",\"jobID\":\"calculator_jobID__1xzrN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"section_mainContainer__2tFui\"};","export default __webpack_public_path__ + \"static/media/SQUARE-BR-TIGHT.997181bd.png\";","import React, { useRef, useEffect } from \"react\";\r\n\r\nexport default function MyCanavas(props) {\r\n  const { draw } = props;\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext(\"2d\");\r\n    const render = () => {\r\n      draw(context);\r\n    };\r\n    render();\r\n  }, [draw]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      width={props.canvasWidth}\r\n      height={props.canvasHeight}\r\n    />\r\n  );\r\n}\r\n","import styles from \"./styles/section.module.css\";\r\n\r\nexport default function Section(props) {\r\n  return <div className={styles.mainContainer}>{props.children}</div>;\r\n}\r\n","export default __webpack_public_path__ + \"static/media/STACK-FL-TIGHT.dcd2278b.png\";","import React from \"react\";\r\n\r\nimport styles from \"./styles/componentToPrint.module.css\";\r\nimport logo from \"../src/imgs/STACK-FL-TIGHT.png\";\r\n\r\nexport const ComponentToPrint = React.forwardRef((props, ref) => {\r\n  let date = new Date();\r\n  let datestamp = date.toLocaleDateString();\r\n  let timestamp = date.toLocaleTimeString();\r\n  return (\r\n    <div ref={ref} className={styles.printSource}>\r\n      <div className={styles.mainContainer}>\r\n        <div className={styles.header}>\r\n          <img src={logo} alt=\"IGN Logo\" />\r\n          <h1>MATERIAL REPORT</h1>\r\n        </div>\r\n        {props.inputField.jobID && <h1>Job Name:{props.inputField.jobID}</h1>}\r\n        <div className={styles.section}>\r\n          <h3>\r\n            Press Sheet = {props.inputField.printWidth}\" X{\" \"}\r\n            {props.inputField.printHeight}\"\r\n          </h3>\r\n          <h3>Parts / Press Sheet = {props.inputField.partsPerPrint}</h3>\r\n        </div>\r\n        <div className={styles.section}>\r\n          <div className={styles.fullRow}>\r\n            <h2> Strip Sheet </h2>\r\n          </div>\r\n          <h3>\r\n            Press Sheets / Strip = {isNaN(props.printUp) ? 0 : props.printUp}\r\n          </h3>\r\n          <h3>\r\n            Parts / Strip ={\" \"}\r\n            {isNaN(props.printUp)\r\n              ? 0\r\n              : props.printUp * props.inputField.partsPerPrint}\r\n          </h3>\r\n          <h3>\r\n            Size = {props.inputField.stripSheetWidth}\" X{\" \"}\r\n            {props.inputField.stripSheetHeight}\"\r\n          </h3>\r\n          <h3>Total = {props.stripQty}</h3>\r\n          <h3>Outer Margin = {props.inputField.outerMargin}</h3>\r\n          <h3>Inner Margins = {props.inputField.innerMargin}</h3>\r\n          <div className={styles.fullRow}>{props.children[0]}</div>\r\n        </div>\r\n        <div className={styles.section}>\r\n          <div className={styles.fullRow}>\r\n            <h2> Parent Sheet </h2>\r\n          </div>\r\n          <h3>\r\n            Strip Sheets / Parent = {isNaN(props.stripUp) ? 0 : props.stripUp}\r\n          </h3>\r\n          <h3>\r\n            Parts / Parent ={\" \"}\r\n            {isNaN(props.printUp)\r\n              ? 0\r\n              : props.printUp * props.inputField.partsPerPrint * props.stripUp}\r\n          </h3>\r\n          <h3>\r\n            Size = {props.inputField.parentSheetWidth}\" X{\" \"}\r\n            {props.inputField.parentSheetHeight}\"\r\n          </h3>\r\n          <h3>Total = {props.sheetQty}</h3>\r\n          <div className={styles.fullRow}>{props.children[1]}</div>\r\n        </div>\r\n        <div className={styles.section}>\r\n          <h3>Target Part Count = {props.inputField.partQty}</h3>\r\n          <h3>\r\n            Overs ={\" \"}\r\n            {isNaN(\r\n              props.stripQty * props.inputField.partsPerPrint * props.printUp\r\n            )\r\n              ? 0\r\n              : props.stripQty *\r\n                  props.inputField.partsPerPrint *\r\n                  props.printUp -\r\n                props.inputField.partQty}\r\n          </h3>\r\n        </div>\r\n        <span className={styles.timestamp}>\r\n          {datestamp} - {timestamp}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\n\r\nimport MyCanavas from \"./MyCanvas\";\r\nimport Section from \"./Section\";\r\nimport { ComponentToPrint } from \"./ComponentToPrint\";\r\n\r\nimport styles from \"./styles/calculator.module.css\";\r\n\r\nexport const Calculator = () => {\r\n  const [inputField, setInputField] = useState({\r\n    stripSheetWidth: 48,\r\n    stripSheetHeight: 16,\r\n    printWidth: 8,\r\n    printHeight: 10,\r\n    innerMargin: 0,\r\n    outerMargin: 0,\r\n    partQty: 100,\r\n    parentSheetWidth: 96,\r\n    parentSheetHeight: 48,\r\n    partsPerPrint: 1,\r\n    overage: 0,\r\n    jobID: \"\"\r\n  });\r\n\r\n  const [printUp, setPrintUp] = useState(0);\r\n  const [stripUp, setStripUp] = useState(0);\r\n\r\n  const [stripQty, setStripQty] = useState(0);\r\n  const [sheetQty, setSheetQty] = useState(0);\r\n\r\n  const [rotateStrip, setRotateStrip] = useState(true);\r\n\r\n  let stripScaleModifier = 0.31;\r\n\r\n  switch (true) {\r\n    case window.innerWidth < 400:\r\n      stripScaleModifier = 0.5;\r\n      break;\r\n    case inputField.stripSheetHeight - inputField.stripSheetWidth >= 6:\r\n      stripScaleModifier = 0.09;\r\n      break;\r\n    case inputField.stripSheetWidth - inputField.stripSheetHeight <= 6:\r\n      stripScaleModifier = 0.15;\r\n      break;\r\n    case inputField.stripSheetHeight >= inputField.stripSheetWidth:\r\n      stripScaleModifier = 0.15;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  let parentScaleModifier = 0.31;\r\n  switch (true) {\r\n    case window.innerWidth < 400:\r\n      parentScaleModifier = 0.5;\r\n      break;\r\n    case inputField.parentSheetHeight - inputField.parentSheetWidth >= 6:\r\n      parentScaleModifier = 0.09;\r\n      break;\r\n    case inputField.parentSheetWidth - inputField.parentSheetHeight <= 6:\r\n      parentScaleModifier = 0.15;\r\n      break;\r\n    case inputField.parentSheetHeight >= inputField.parentSheetWidth:\r\n      parentScaleModifier = 0.15;\r\n      break;\r\n    case inputField.parentSheetWidth > 0 && inputField.parentSheetWidth <= 12:\r\n      parentScaleModifier = 0.15;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  let stripScale = (\r\n    (window.innerWidth / inputField.stripSheetWidth) *\r\n    stripScaleModifier\r\n  ).toFixed(2);\r\n\r\n  let parentScale = (\r\n    (window.innerWidth / inputField.parentSheetWidth) *\r\n    parentScaleModifier\r\n  ).toFixed(2);\r\n\r\n  const inputsHandler = (e) => {\r\n    if (e.target.name === \"jobID\") {\r\n      setInputField({\r\n        ...inputField,\r\n        [e.target.name]: e.target.value\r\n      });\r\n      return;\r\n    }\r\n    if (e.target.value >= 0) {\r\n      if (e.target.name === \"partQty\" || e.target.name === \"partsPerPrint\") {\r\n        setInputField({\r\n          ...inputField,\r\n          [e.target.name]: parseFloat(e.target.value)\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (e.target.value <= 1800) {\r\n        setInputField({\r\n          ...inputField,\r\n          [e.target.name]: parseFloat(e.target.value)\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const drawStrip = (ctx) => {\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n    ctx.fillStyle = \"white\";\r\n    ctx.strokeStyle = \"black\";\r\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n    ctx.strokeRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n    ctx.strokeStyle = \"#ff0000\";\r\n    ctx.fillStyle = \"#f2dcda\";\r\n\r\n    makeGrid(\r\n      inputField.outerMargin * stripScale,\r\n      inputField.outerMargin * stripScale,\r\n      inputField.outerMargin * stripScale,\r\n      inputField.innerMargin * stripScale,\r\n      inputField.stripSheetWidth * stripScale,\r\n      inputField.stripSheetHeight * stripScale,\r\n      inputField.printWidth * stripScale,\r\n      inputField.printHeight * stripScale,\r\n      ctx\r\n    );\r\n\r\n    //check if right drop is usable for rotated parts\r\n    let dropWidth = dropDim(\r\n      inputField.stripSheetWidth,\r\n      inputField.printWidth,\r\n      inputField.innerMargin,\r\n      inputField.outerMargin\r\n    );\r\n    if (dropWidth >= inputField.printHeight) {\r\n      let x = coordinate(\r\n        inputField.stripSheetWidth,\r\n        inputField.printWidth,\r\n        inputField.innerMargin,\r\n        inputField.outerMargin\r\n      );\r\n      makeGrid(\r\n        x * stripScale,\r\n        inputField.outerMargin * stripScale,\r\n        inputField.outerMargin * stripScale,\r\n        inputField.innerMargin * stripScale,\r\n        dropWidth * stripScale,\r\n        inputField.stripSheetHeight * stripScale,\r\n        inputField.printHeight * stripScale,\r\n        inputField.printWidth * stripScale,\r\n        ctx\r\n      );\r\n    }\r\n\r\n    //check if bottom drop is usable for rotated parts\r\n    let dropHeight = dropDim(\r\n      inputField.stripSheetHeight,\r\n      inputField.printHeight,\r\n      inputField.innerMargin,\r\n      inputField.outerMargin\r\n    );\r\n    if (dropHeight >= inputField.printWidth) {\r\n      let y = coordinate(\r\n        inputField.stripSheetHeight,\r\n        inputField.printHeight,\r\n        inputField.innerMargin,\r\n        inputField.outerMargin\r\n      );\r\n      makeGrid(\r\n        inputField.outerMargin * stripScale,\r\n        y * stripScale,\r\n        inputField.outerMargin * stripScale,\r\n        inputField.innerMargin * stripScale,\r\n        inputField.stripSheetWidth * stripScale,\r\n        dropHeight * stripScale,\r\n        inputField.printHeight * stripScale,\r\n        inputField.printWidth * stripScale,\r\n        ctx\r\n      );\r\n    }\r\n  };\r\n\r\n  const drawParent = (ctx) => {\r\n    let stripWidth = inputField.stripSheetWidth;\r\n    let stripHeight = inputField.stripSheetHeight;\r\n\r\n    //check if strip orientation\r\n    if (rotateStrip) {\r\n      stripWidth = inputField.stripSheetHeight;\r\n      stripHeight = inputField.stripSheetWidth;\r\n    }\r\n\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n    ctx.fillStyle = \"white\";\r\n    ctx.strokeStyle = \"black\";\r\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n    ctx.strokeRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n    ctx.strokeStyle = \"#ff0000\";\r\n    ctx.fillStyle = \"#f2dcda\";\r\n\r\n    makeGrid(\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      inputField.parentSheetWidth * parentScale,\r\n      inputField.parentSheetHeight * parentScale,\r\n      stripWidth * parentScale,\r\n      stripHeight * parentScale,\r\n      ctx\r\n    );\r\n\r\n    //check if right drop is usable for rotated parts\r\n    let dropWidth = dropDim(inputField.parentSheetWidth, stripHeight, 0, 0);\r\n    if (dropWidth >= inputField.stripSheetHeight) {\r\n      let x = coordinate(inputField.parentSheetWidth, stripWidth, 0, 0);\r\n      makeGrid(\r\n        x * parentScale,\r\n        0,\r\n        0,\r\n        0,\r\n        dropWidth * parentScale,\r\n        inputField.parentSheetHeight * parentScale,\r\n        stripHeight * parentScale,\r\n        stripWidth * parentScale,\r\n        ctx\r\n      );\r\n    }\r\n\r\n    //check if bottom drop is usable for rotated parts\r\n    let dropHeight = dropDim(inputField.parentSheetHeight, stripHeight, 0, 0);\r\n    if (dropHeight >= stripWidth) {\r\n      let y = coordinate(inputField.parentSheetHeight, stripHeight, 0, 0);\r\n      makeGrid(\r\n        0,\r\n        y * parentScale,\r\n        0,\r\n        0,\r\n        inputField.parentSheetWidth * parentScale,\r\n        dropHeight * parentScale,\r\n        stripHeight * parentScale,\r\n        stripWidth * parentScale,\r\n        ctx\r\n      );\r\n    }\r\n  };\r\n\r\n  function rotatePart() {\r\n    let newWidth = inputField.printHeight;\r\n    let newHeight = inputField.printWidth;\r\n    setInputField({\r\n      ...inputField,\r\n      printWidth: newWidth,\r\n      printHeight: newHeight\r\n    });\r\n  }\r\n\r\n  function rotateSheet() {\r\n    setRotateStrip(!rotateStrip);\r\n  }\r\n\r\n  useEffect(() => {}, [rotateStrip]);\r\n\r\n  function partsAcross(sheetDim, partDim, innerMargin, outerMargin) {\r\n    let coordinate = outerMargin;\r\n    let partCount = 0;\r\n\r\n    while (sheetDim > 0 && partDim > 0 && coordinate <= sheetDim) {\r\n      coordinate += partDim;\r\n      if (coordinate <= sheetDim - outerMargin) {\r\n        partCount += 1;\r\n        coordinate += innerMargin;\r\n      }\r\n    }\r\n\r\n    if (partDim > 0) {\r\n      return partCount;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  function makeGrid(\r\n    x,\r\n    y,\r\n    outerMargin,\r\n    innerMargin,\r\n    stripSheetWidth,\r\n    stripSheetHeight,\r\n    printWidth,\r\n    printHeight,\r\n    ctx\r\n  ) {\r\n    let xOffset = x;\r\n    let yOffset = y;\r\n\r\n    let columnLengthInitial = partsAcross(\r\n      stripSheetWidth,\r\n      printWidth,\r\n      innerMargin,\r\n      outerMargin\r\n    );\r\n    let columnLength = columnLengthInitial;\r\n\r\n    let rowLength = partsAcross(\r\n      stripSheetHeight,\r\n      printHeight,\r\n      innerMargin,\r\n      outerMargin\r\n    );\r\n\r\n    let grid = [];\r\n    while (rowLength > 0) {\r\n      while (columnLength > 0) {\r\n        grid.push(ctx.fillRect(xOffset, yOffset, printWidth, printHeight));\r\n        grid.push(ctx.strokeRect(xOffset, yOffset, printWidth, printHeight));\r\n        xOffset += printWidth + innerMargin;\r\n        columnLength -= 1;\r\n      }\r\n      yOffset += printHeight + innerMargin;\r\n      rowLength -= 1;\r\n      //reset columnLength and xOffset for new row\r\n      columnLength = columnLengthInitial;\r\n      xOffset = x;\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  const dropDim = useCallback((sheetDim, partDim, innerMargin, outerMargin) => {\r\n    let parts = partsAcross(sheetDim, partDim, innerMargin, outerMargin);\r\n    return sheetDim - outerMargin - parts * (partDim + innerMargin);\r\n  }, []);\r\n\r\n  function coordinate(sheetDim, partDim, innerMargin, outerMargin) {\r\n    let parts = partsAcross(sheetDim, partDim, innerMargin, outerMargin);\r\n    return outerMargin + parts * (partDim + innerMargin);\r\n  }\r\n\r\n  const componentRef = React.useRef(null);\r\n\r\n  const handlePrint = useReactToPrint({\r\n    content: () => componentRef.current\r\n  });\r\n\r\n  //Update prints / strip sheet\r\n  useEffect(() => {\r\n    let columns = partsAcross(\r\n      inputField.stripSheetWidth,\r\n      inputField.printWidth,\r\n      inputField.innerMargin,\r\n      inputField.outerMargin\r\n    );\r\n    let rows = partsAcross(\r\n      inputField.stripSheetHeight,\r\n      inputField.printHeight,\r\n      inputField.innerMargin,\r\n      inputField.outerMargin\r\n    );\r\n    let extraColumns = 0;\r\n    let extraRows = 0;\r\n\r\n    //check if right drop is usable for rotated parts\r\n    let dropWidth = dropDim(\r\n      inputField.stripSheetWidth,\r\n      inputField.printWidth,\r\n      inputField.innerMargin,\r\n      inputField.outerMargin\r\n    );\r\n    if (dropWidth >= inputField.printHeight) {\r\n      extraColumns = partsAcross(\r\n        dropWidth,\r\n        inputField.printHeight,\r\n        inputField.innerMargin,\r\n        inputField.outerMargin\r\n      );\r\n      extraRows = partsAcross(\r\n        inputField.stripSheetHeight,\r\n        inputField.printWidth,\r\n        inputField.innerMargin,\r\n        inputField.outerMargin\r\n      );\r\n    }\r\n    //check if botom drop is usable for rotated parts\r\n    let dropHeight = dropDim(\r\n      inputField.stripSheetHeight,\r\n      inputField.printHeight,\r\n      inputField.innerMargin,\r\n      inputField.outerMargin\r\n    );\r\n    if (dropHeight >= inputField.printWidth) {\r\n      extraRows = partsAcross(\r\n        dropHeight,\r\n        inputField.printWidth,\r\n        inputField.innerMargin,\r\n        inputField.outerMargin\r\n      );\r\n      extraColumns = partsAcross(\r\n        inputField.stripSheetWidth,\r\n        inputField.printHeight,\r\n        inputField.innerMargin,\r\n        inputField.outerMargin\r\n      );\r\n    }\r\n    setPrintUp(columns * rows + extraColumns * extraRows);\r\n  }, [inputField, dropDim]);\r\n\r\n  //Update strips / sheet\r\n  useEffect(() => {\r\n    let stripWidth = inputField.stripSheetWidth;\r\n    let stripHeight = inputField.stripSheetHeight;\r\n\r\n    //check for strip orientation\r\n    if (rotateStrip) {\r\n      stripWidth = inputField.stripSheetHeight;\r\n      stripHeight = inputField.stripSheetWidth;\r\n    }\r\n\r\n    let columns = partsAcross(inputField.parentSheetWidth, stripWidth, 0, 0);\r\n    let rows = partsAcross(inputField.parentSheetHeight, stripHeight, 0, 0);\r\n\r\n    let extraColumns = 0;\r\n    let extraRows = 0;\r\n\r\n    //check if right drop is usable for rotated parts\r\n    let dropWidth = dropDim(inputField.parentSheetWidth, stripWidth, 0, 0);\r\n    if (dropWidth >= stripHeight) {\r\n      extraColumns = partsAcross(dropWidth, stripHeight, 0, 0);\r\n      extraRows = partsAcross(inputField.parentSheetHeight, stripWidth, 0, 0);\r\n    }\r\n    //check if bottom drop is usable for rotated parts\r\n    let dropHeight = dropDim(inputField.parentSheetHeight, stripHeight, 0, 0);\r\n    if (dropHeight >= stripWidth) {\r\n      extraRows = partsAcross(dropHeight, stripWidth, 0, 0);\r\n      extraColumns = partsAcross(\r\n        inputField.parentSheetWidth,\r\n        stripHeight,\r\n        0,\r\n        0\r\n      );\r\n    }\r\n    setStripUp(columns * rows + extraColumns * extraRows);\r\n  }, [inputField, dropDim, rotateStrip]);\r\n\r\n  useEffect(() => {\r\n    if (printUp > 0) {\r\n      setStripQty(\r\n        Math.ceil(\r\n          (inputField.partQty +\r\n            inputField.partQty * parseFloat(inputField.overage) * 0.01) /\r\n            inputField.partsPerPrint /\r\n            printUp\r\n        )\r\n      );\r\n    } else {\r\n      setStripQty(0);\r\n    }\r\n  }, [inputField, printUp]);\r\n\r\n  useEffect(() => {\r\n    if (stripQty > 0 && stripUp > 0) {\r\n      setSheetQty(Math.floor((stripQty / stripUp) * 100) / 100);\r\n    } else {\r\n      setSheetQty(0);\r\n    }\r\n  }, [inputField, stripQty, stripUp]);\r\n\r\n  return (\r\n    <div className={styles.mainContainer}>\r\n      {/* Top Row */}\r\n      <div className={styles.rowWrapContainer}>\r\n        <Section>\r\n          <div className={styles.rowWrapContainer}>\r\n            <div className={styles.columnContainer}>\r\n              <h2>PART COUNT</h2>\r\n              <div className={styles.rowWrapContainer}>\r\n                <div className={styles.columnContainer}>\r\n                  <h4>Target Part Qty</h4>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"partQty\"\r\n                    onChange={inputsHandler}\r\n                    placeholder=\"qty\"\r\n                    value={inputField.partQty || \"\"}\r\n                  />\r\n                </div>\r\n                <div className={styles.columnContainer}>\r\n                  <h4>Minimum Overage (%)</h4>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"overage\"\r\n                    onChange={inputsHandler}\r\n                    placeholder=\"0\"\r\n                    value={inputField.overage || \"\"}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Section>\r\n        <Section>\r\n          <h2>PRESS SHEET</h2>\r\n          <div className={styles.rowWrapContainer}>\r\n            <div className={styles.columnContainer}>\r\n              <h4>Parts / Press Sheet</h4>\r\n              <input\r\n                type=\"number\"\r\n                name=\"partsPerPrint\"\r\n                onChange={inputsHandler}\r\n                placeholder=\"Qty\"\r\n                value={inputField.partsPerPrint || \"\"}\r\n              />\r\n            </div>\r\n            <div className={styles.columnContainer}>\r\n              <h4>Width (in.)</h4>\r\n              <input\r\n                type=\"number\"\r\n                name=\"printWidth\"\r\n                onChange={inputsHandler}\r\n                placeholder=\"width\"\r\n                value={inputField.printWidth || \"\"}\r\n              />\r\n            </div>\r\n            <div className={styles.columnContainer}>\r\n              <h4>Height (in.)</h4>\r\n              <input\r\n                type=\"number\"\r\n                name=\"printHeight\"\r\n                onChange={inputsHandler}\r\n                placeholder=\"height\"\r\n                value={inputField.printHeight || \"\"}\r\n              />\r\n            </div>\r\n          </div>\r\n        </Section>\r\n      </div>\r\n\r\n      {/* Strip Sheet*/}\r\n      <Section>\r\n        <h2>STRIP SHEET</h2>\r\n        <div className={styles.rowWrapContainer}>\r\n          <div className={styles.columnContainer}>\r\n            <h4>Width (in.)</h4>\r\n            <input\r\n              type=\"number\"\r\n              name=\"stripSheetWidth\"\r\n              onChange={inputsHandler}\r\n              placeholder=\"width\"\r\n              value={inputField.stripSheetWidth || \"\"}\r\n            />\r\n          </div>\r\n          <div className={styles.columnContainer}>\r\n            <h4>Height (in.)</h4>\r\n            <input\r\n              type=\"number\"\r\n              name=\"stripSheetHeight\"\r\n              onChange={inputsHandler}\r\n              placeholder=\"height\"\r\n              value={inputField.stripSheetHeight || \"\"}\r\n            />\r\n          </div>\r\n\r\n          <div className={styles.columnContainer}>\r\n            <h4>Outer Margin (in.)</h4>\r\n            <input\r\n              type=\"number\"\r\n              name=\"outerMargin\"\r\n              onChange={inputsHandler}\r\n              placeholder=\"0\"\r\n              step=\".125\"\r\n              value={inputField.outerMargin || \"\"}\r\n            />\r\n          </div>\r\n          <div className={styles.columnContainer}>\r\n            <h4>Inner Margins (in.)</h4>\r\n            <input\r\n              type=\"number\"\r\n              name=\"innerMargin\"\r\n              onChange={inputsHandler}\r\n              placeholder=\"0\"\r\n              step=\".125\"\r\n              value={inputField.innerMargin || \"\"}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className={styles.rowWrapContainer}>\r\n          <MyCanavas\r\n            draw={drawStrip}\r\n            canvasWidth={inputField.stripSheetWidth * stripScale}\r\n            canvasHeight={inputField.stripSheetHeight * stripScale}\r\n          />\r\n        </div>\r\n        <button type=\"button\" onClick={rotatePart}>\r\n          ROTATE PRESS SHEET\r\n        </button>\r\n        <div className={styles.rowContainer}>\r\n          <h3>\r\n            Press Sheets Up = {\"  \"}\r\n            <span className={styles.resultNumber}>\r\n              {isNaN(printUp) ? 0 : printUp}\r\n            </span>\r\n          </h3>\r\n          <h3>\r\n            Parts Up = {\"  \"}\r\n            <span className={styles.resultNumber}>\r\n              {isNaN(printUp) ? 0 : printUp * inputField.partsPerPrint}\r\n            </span>\r\n          </h3>\r\n        </div>\r\n      </Section>\r\n\r\n      {/* Parent Sheet */}\r\n      <Section>\r\n        <h2>PARENT SHEET</h2>\r\n\r\n        <div className={styles.rowContainer}>\r\n          <div className={styles.columnContainer}>\r\n            <h4>Width (in.)</h4>\r\n            <input\r\n              type=\"number\"\r\n              name=\"parentSheetWidth\"\r\n              onChange={inputsHandler}\r\n              placeholder=\"width\"\r\n              value={inputField.parentSheetWidth || \"\"}\r\n            />\r\n          </div>\r\n          <div className={styles.columnContainer}>\r\n            <h4>Height (in.)</h4>\r\n            <input\r\n              type=\"number\"\r\n              name=\"parentSheetHeight\"\r\n              onChange={inputsHandler}\r\n              placeholder=\"height\"\r\n              value={inputField.parentSheetHeight || \"\"}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className={styles.rowContainer}>\r\n          <MyCanavas\r\n            draw={drawParent}\r\n            canvasWidth={inputField.parentSheetWidth * parentScale}\r\n            canvasHeight={inputField.parentSheetHeight * parentScale}\r\n          />\r\n        </div>\r\n        <button type=\"button\" onClick={rotateSheet}>\r\n          ROTATE STRIP SHEET\r\n        </button>\r\n        <div className={styles.rowContainer}>\r\n          <h3>\r\n            Strips Up = {\"  \"}\r\n            <span className={styles.resultNumber}>\r\n              {isNaN(stripUp) ? 0 : stripUp}\r\n            </span>\r\n          </h3>\r\n          <h3>\r\n            Parts Up ={\" \"}\r\n            <span className={styles.resultNumber}>\r\n              {isNaN(printUp)\r\n                ? 0\r\n                : printUp * inputField.partsPerPrint * stripUp}\r\n            </span>\r\n          </h3>\r\n        </div>\r\n      </Section>\r\n\r\n      {/* Bottom Row */}\r\n      <Section>\r\n        <div className={styles.rowWrapContainer}>\r\n          <h3>\r\n            Parent Sheet Total ={\"   \"}\r\n            <span className={styles.resultNumber}>\r\n              {isNaN(sheetQty) || !isFinite(sheetQty) ? 0 : sheetQty}\r\n            </span>\r\n          </h3>\r\n          <h3>\r\n            Strip Sheet Total ={\"   \"}\r\n            <span className={styles.resultNumber}>\r\n              {isNaN(stripQty) || !isFinite(stripQty) ? 0 : stripQty}\r\n            </span>\r\n          </h3>\r\n          <h3>\r\n            Part Total ={\"   \"}\r\n            <span className={styles.resultNumber}>\r\n              {isNaN(stripUp * inputField.partsPerPrint * printUp)\r\n                ? 0\r\n                : stripQty * inputField.partsPerPrint * printUp}\r\n            </span>\r\n          </h3>\r\n        </div>\r\n      </Section>\r\n      <span className={styles.jobID}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"jobID\"\r\n          onChange={inputsHandler}\r\n          placeholder=\"Job Name\"\r\n          className={styles.jobInput}\r\n          value={inputField.jobID || \"\"}\r\n        />\r\n      </span>\r\n      <button type=\"button\" onClick={handlePrint}>\r\n        PRINT\r\n      </button>\r\n\r\n      <ComponentToPrint\r\n        ref={componentRef}\r\n        stripUp={stripUp}\r\n        stripQty={stripQty}\r\n        printUp={printUp}\r\n        sheetQty={sheetQty}\r\n        inputField={inputField}\r\n      >\r\n        <MyCanavas\r\n          draw={drawStrip}\r\n          canvasWidth={inputField.stripSheetWidth * stripScale}\r\n          canvasHeight={inputField.stripSheetHeight * stripScale}\r\n        />\r\n        <MyCanavas\r\n          draw={drawParent}\r\n          canvasWidth={inputField.parentSheetWidth * parentScale}\r\n          canvasHeight={inputField.parentSheetHeight * parentScale}\r\n        />\r\n      </ComponentToPrint>\r\n    </div>\r\n  );\r\n};\r\n","import logo from \"../src/imgs/SQUARE-BR-TIGHT.png\";\n\nimport \"./styles.css\";\nimport { Calculator } from \"./Calculator.js\";\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <img src={logo} alt=\"IGN Logo\" />\n        <h1>MATERIAL CALCULATOR</h1>\n      </div>\n      <Calculator />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"printSource\":\"componentToPrint_printSource__zkm2E\",\"mainContainer\":\"componentToPrint_mainContainer__1kDBe\",\"header\":\"componentToPrint_header__3m3gw\",\"section\":\"componentToPrint_section__La_5B\",\"fullRow\":\"componentToPrint_fullRow__3YeRo\",\"timestamp\":\"componentToPrint_timestamp__2_cnf\"};"],"sourceRoot":""}